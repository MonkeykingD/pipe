class MindsporePagedAttentionOpConverter : public OpRewritePattern<mindspore::PagedAttentionOp> {
public:
  using OpRewritePattern::OpRewritePattern;

  LogicalResult matchAndRewrite(PagedAttentionOp op, typename PagedAttentionOp::Adaptor adaptor,
                                ConversionPatternRewriter &rewriter) const override {
    // 获取输入矩阵A和B，它们将被相乘
    Value q = adaptor.getQ();
    Value k = adaptor.getK();
    Value v = adaptor.getV();

    auto transposeK = false;
    if (adaptor.getTransposeKAttr()) {
      transposeK = adaptor.getTransposeKAttr().getValue();
    }    
    // 进行矩阵乘法 Q * K
    auto matmulOp1 = rewriter.create<linalg::MatmulOp>(
        op.getLoc(), q, k, 
        rewriter.getBoolAttr(/*transposeQ=*/false), 
        rewriter.getBoolAttr(transposeK));
    // 对结果应用 softmax 操作
    auto softmaxOp = rewriter.create<linalg::SoftmaxOp>(op.getLoc(), matmulOp1);

    // 将 softmax 后的乘积与矩阵 V 相乘
    auto matmulOp2 = rewriter.create<linalg::MatmulOp>(op.getLoc(), softmaxOp, v);

    // 替换原始操作
    rewriter.replaceOp(op, matmulOp2);

    return success();
  }
};
